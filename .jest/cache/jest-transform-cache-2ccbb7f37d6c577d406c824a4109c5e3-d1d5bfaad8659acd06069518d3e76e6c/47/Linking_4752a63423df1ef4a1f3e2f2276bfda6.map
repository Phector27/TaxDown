{"version":3,"names":["Linking","Platform","OS","nullthrows","NativeLinkingManager","undefined","eventType","listener","context","addListener","removeListener","url","_validateURL","NativeIntentAndroid","openURL","canOpenURL","openSettings","InteractionManager","runAfterInteractions","then","getInitialURL","action","extras","sendIntent","Promise","resolve","reject","Error","invariant","NativeEventEmitter","module","exports"],"sources":["Linking.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport InteractionManager from '../Interaction/InteractionManager';\nimport Platform from '../Utilities/Platform';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\ntype LinkingEventDefinitions = {\n  url: [{url: string}],\n};\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking\n */\nclass Linking extends NativeEventEmitter<LinkingEventDefinitions> {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking#addeventlistener\n   */\n  addEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return this.addListener(eventType, listener);\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addEventListener`.\n   */\n  removeEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n  ): void {\n    // NOTE: This will report a deprecation notice via `console.error`.\n    this.removeListener(eventType, listener);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking#openurl\n   */\n  openURL(url: string): Promise<void> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking#opensettings\n   */\n  openSettings(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? InteractionManager.runAfterInteractions().then(() =>\n          nullthrows(NativeIntentAndroid).getInitialURL(),\n        )\n      : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n\n  _validateURL(url: string) {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n"],"mappings":";;;;;;;;;;;;AAWA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAYMA,O;;;;;EACJ,mBAAc;IAAA;IAAA,yBACNC,iBAAA,CAASC,EAAT,KAAgB,KAAhB,GAAwB,IAAAC,mBAAA,EAAWC,6BAAX,CAAxB,GAA2DC,SADrD;EAEb;;;;WAQD,0BACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;MACnB,OAAO,KAAKC,WAAL,CAAiBH,SAAjB,EAA4BC,QAA5B,CAAP;IACD;;;WAKD,6BACED,SADF,EAEEC,QAFF,EAGQ;MAEN,KAAKG,cAAL,CAAoBJ,SAApB,EAA+BC,QAA/B;IACD;;;WAOD,iBAAQI,GAAR,EAAoC;MAClC,KAAKC,YAAL,CAAkBD,GAAlB;;MACA,IAAIV,iBAAA,CAASC,EAAT,KAAgB,SAApB,EAA+B;QAC7B,OAAO,IAAAC,mBAAA,EAAWU,4BAAX,EAAgCC,OAAhC,CAAwCH,GAAxC,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAAR,mBAAA,EAAWC,6BAAX,EAAiCU,OAAjC,CAAyCH,GAAzC,CAAP;MACD;IACF;;;WAOD,oBAAWA,GAAX,EAA0C;MACxC,KAAKC,YAAL,CAAkBD,GAAlB;;MACA,IAAIV,iBAAA,CAASC,EAAT,KAAgB,SAApB,EAA+B;QAC7B,OAAO,IAAAC,mBAAA,EAAWU,4BAAX,EAAgCE,UAAhC,CAA2CJ,GAA3C,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAAR,mBAAA,EAAWC,6BAAX,EAAiCW,UAAjC,CAA4CJ,GAA5C,CAAP;MACD;IACF;;;WAOD,wBAA8B;MAC5B,IAAIV,iBAAA,CAASC,EAAT,KAAgB,SAApB,EAA+B;QAC7B,OAAO,IAAAC,mBAAA,EAAWU,4BAAX,EAAgCG,YAAhC,EAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAAb,mBAAA,EAAWC,6BAAX,EAAiCY,YAAjC,EAAP;MACD;IACF;;;WAQD,yBAAkC;MAChC,OAAOf,iBAAA,CAASC,EAAT,KAAgB,SAAhB,GACHe,2BAAA,CAAmBC,oBAAnB,GAA0CC,IAA1C,CAA+C;QAAA,OAC7C,IAAAhB,mBAAA,EAAWU,4BAAX,EAAgCO,aAAhC,EAD6C;MAAA,CAA/C,CADG,GAIH,IAAAjB,mBAAA,EAAWC,6BAAX,EAAiCgB,aAAjC,EAJJ;IAKD;;;WASD,oBACEC,MADF,EAEEC,MAFF,EAOiB;MACf,IAAIrB,iBAAA,CAASC,EAAT,KAAgB,SAApB,EAA+B;QAC7B,OAAO,IAAAC,mBAAA,EAAWU,4BAAX,EAAgCU,UAAhC,CAA2CF,MAA3C,EAAmDC,MAAnD,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;UAAA,OAAqBA,MAAM,CAAC,IAAIC,KAAJ,CAAU,aAAV,CAAD,CAA3B;QAAA,CAAZ,CAAP;MACD;IACF;;;WAED,sBAAahB,GAAb,EAA0B;MACxB,IAAAiB,kBAAA,EACE,OAAOjB,GAAP,KAAe,QADjB,EAEE,2CAA2CA,GAF7C;MAIA,IAAAiB,kBAAA,EAAUjB,GAAV,EAAe,8BAAf;IACD;;;EAjHmBkB,4B;;AAoHtBC,MAAM,CAACC,OAAP,GAAkB,IAAI/B,OAAJ,EAAlB"}