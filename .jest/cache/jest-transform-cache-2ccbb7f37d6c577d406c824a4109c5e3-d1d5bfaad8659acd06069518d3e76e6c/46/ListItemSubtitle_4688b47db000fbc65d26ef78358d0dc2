348c0f0f37444b60477fa1d96fd44221
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Text = _interopRequireDefault(require("../text/Text"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ANDROID_SECONDARY = 'rgba(0, 0, 0, 0.54)';

var ListItemSubtitle = function ListItemSubtitle(_a) {
  var style = _a.style,
      right = _a.right,
      children = _a.children,
      props = __rest(_a, ["style", "right", "children"]);

  return _react.default.createElement(_Text.default, (0, _extends2.default)({
    testID: "listItemTitle",
    style: _reactNative.StyleSheet.flatten([styles.subtitle, right && styles.rightSubtitle, style])
  }, props), children);
};

var styles = _reactNative.StyleSheet.create({
  subtitle: (0, _extends2.default)({
    backgroundColor: 'transparent'
  }, _reactNative.Platform.select({
    ios: {
      fontSize: 15
    },
    default: {
      color: ANDROID_SECONDARY,
      fontSize: 14
    }
  })),
  rightSubtitle: {
    color: ANDROID_SECONDARY
  }
});

var _default = (0, _config.withTheme)(ListItemSubtitle, 'ListItemSubtitle');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFORFJPSURfU0VDT05EQVJZIiwiTGlzdEl0ZW1TdWJ0aXRsZSIsIl9hIiwic3R5bGUiLCJyaWdodCIsImNoaWxkcmVuIiwicHJvcHMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsInN1YnRpdGxlIiwicmlnaHRTdWJ0aXRsZSIsImNyZWF0ZSIsImJhY2tncm91bmRDb2xvciIsIlBsYXRmb3JtIiwic2VsZWN0IiwiaW9zIiwiZm9udFNpemUiLCJkZWZhdWx0IiwiY29sb3IiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJMaXN0SXRlbVN1YnRpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vdGV4dC9UZXh0JztcbmNvbnN0IEFORFJPSURfU0VDT05EQVJZID0gJ3JnYmEoMCwgMCwgMCwgMC41NCknO1xuY29uc3QgTGlzdEl0ZW1TdWJ0aXRsZSA9IChfYSkgPT4ge1xuICAgIHZhciB7IHN0eWxlLCByaWdodCwgY2hpbGRyZW4gfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wic3R5bGVcIiwgXCJyaWdodFwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICByZXR1cm4gKDxUZXh0IHRlc3RJRD1cImxpc3RJdGVtVGl0bGVcIiBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgc3R5bGVzLnN1YnRpdGxlLFxuICAgICAgICByaWdodCAmJiBzdHlsZXMucmlnaHRTdWJ0aXRsZSxcbiAgICAgICAgc3R5bGUsXG4gICAgXSl9IHsuLi5wcm9wc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9UZXh0Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIHN1YnRpdGxlOiBPYmplY3QuYXNzaWduKHsgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGlvczoge1xuICAgICAgICAgICAgZm9udFNpemU6IDE1LFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb2xvcjogQU5EUk9JRF9TRUNPTkRBUlksXG4gICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgIH0sXG4gICAgfSkpLFxuICAgIHJpZ2h0U3VidGl0bGU6IHtcbiAgICAgICAgY29sb3I6IEFORFJPSURfU0VDT05EQVJZLFxuICAgIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShMaXN0SXRlbVN1YnRpdGxlLCAnTGlzdEl0ZW1TdWJ0aXRsZScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFXQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFkQSxJQUFJQSxNQUFNLEdBQUksUUFBUSxLQUFLQSxNQUFkLElBQXlCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsRUFBUjs7RUFDQSxLQUFLLElBQUlDLENBQVQsSUFBY0gsQ0FBZDtJQUFpQixJQUFJSSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1AsQ0FBckMsRUFBd0NHLENBQXhDLEtBQThDRixDQUFDLENBQUNPLE9BQUYsQ0FBVUwsQ0FBVixJQUFlLENBQWpFLEVBQ2JELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQU9ILENBQUMsQ0FBQ0csQ0FBRCxDQUFSO0VBREo7O0VBRUEsSUFBSUgsQ0FBQyxJQUFJLElBQUwsSUFBYSxPQUFPSSxNQUFNLENBQUNLLHFCQUFkLEtBQXdDLFVBQXpELEVBQ0ksS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkJULENBQTdCLENBQXBCLEVBQXFEVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBM0QsRUFBbUVELENBQUMsRUFBcEUsRUFBd0U7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFGLENBQVVMLENBQUMsQ0FBQ08sQ0FBRCxDQUFYLElBQWtCLENBQWxCLElBQXVCTixNQUFNLENBQUNDLFNBQVAsQ0FBaUJPLG9CQUFqQixDQUFzQ0wsSUFBdEMsQ0FBMkNQLENBQTNDLEVBQThDRyxDQUFDLENBQUNPLENBQUQsQ0FBL0MsQ0FBM0IsRUFDSVIsQ0FBQyxDQUFDQyxDQUFDLENBQUNPLENBQUQsQ0FBRixDQUFELEdBQVVWLENBQUMsQ0FBQ0csQ0FBQyxDQUFDTyxDQUFELENBQUYsQ0FBWDtFQUNQO0VBQ0wsT0FBT1IsQ0FBUDtBQUNILENBVkQ7O0FBZUEsSUFBTVcsaUJBQWlCLEdBQUcscUJBQTFCOztBQUNBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsRUFBRCxFQUFRO0VBQzdCLElBQU1DLEtBQU4sR0FBaUNELEVBQWpDLENBQU1DLEtBQU47RUFBQSxJQUFhQyxLQUFiLEdBQWlDRixFQUFqQyxDQUFhRSxLQUFiO0VBQUEsSUFBb0JDLFFBQXBCLEdBQWlDSCxFQUFqQyxDQUFvQkcsUUFBcEI7RUFBQSxJQUFxQ0MsS0FBckMsR0FBNkNwQixNQUFNLENBQUNnQixFQUFELEVBQUssQ0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixVQUFuQixDQUFMLENBQW5EOztFQUNBLE9BQVEsNkJBQUMsYUFBRDtJQUFNLE1BQU0sRUFBQyxlQUFiO0lBQTZCLEtBQUssRUFBRUssdUJBQUEsQ0FBV0MsT0FBWCxDQUFtQixDQUMzREMsTUFBTSxDQUFDQyxRQURvRCxFQUUzRE4sS0FBSyxJQUFJSyxNQUFNLENBQUNFLGFBRjJDLEVBRzNEUixLQUgyRCxDQUFuQjtFQUFwQyxHQUlBRyxLQUpBLEdBS0xELFFBTEssQ0FBUjtBQU9ILENBVEQ7O0FBVUEsSUFBTUksTUFBTSxHQUFHRix1QkFBQSxDQUFXSyxNQUFYLENBQWtCO0VBQzdCRixRQUFRLEVBQUUsdUJBQWM7SUFBRUcsZUFBZSxFQUFFO0VBQW5CLENBQWQsRUFBa0RDLHFCQUFBLENBQVNDLE1BQVQsQ0FBZ0I7SUFDeEVDLEdBQUcsRUFBRTtNQUNEQyxRQUFRLEVBQUU7SUFEVCxDQURtRTtJQUl4RUMsT0FBTyxFQUFFO01BQ0xDLEtBQUssRUFBRW5CLGlCQURGO01BRUxpQixRQUFRLEVBQUU7SUFGTDtFQUorRCxDQUFoQixDQUFsRCxDQURtQjtFQVU3Qk4sYUFBYSxFQUFFO0lBQ1hRLEtBQUssRUFBRW5CO0VBREk7QUFWYyxDQUFsQixDQUFmOztlQWNlLElBQUFvQixpQkFBQSxFQUFVbkIsZ0JBQVYsRUFBNEIsa0JBQTVCLEMifQ==