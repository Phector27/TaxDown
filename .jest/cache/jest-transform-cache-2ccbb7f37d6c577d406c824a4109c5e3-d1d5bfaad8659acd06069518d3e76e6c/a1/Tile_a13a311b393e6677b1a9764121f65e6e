2f7529fae5e9debcf34ebc6293f17985
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tile = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Image = _interopRequireDefault(require("../image/Image"));

var _Text = _interopRequireDefault(require("../text/Text"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var _FeaturedTile = _interopRequireDefault(require("./FeaturedTile"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Tile = function Tile(props) {
  var featured = props.featured,
      imageSrc = props.imageSrc,
      icon = props.icon,
      title = props.title,
      children = props.children,
      caption = props.caption,
      titleStyle = props.titleStyle,
      onPress = props.onPress,
      activeOpacity = props.activeOpacity,
      overlayContainerStyle = props.overlayContainerStyle,
      captionStyle = props.captionStyle,
      iconContainerStyle = props.iconContainerStyle,
      imageContainerStyle = props.imageContainerStyle,
      containerStyle = props.containerStyle,
      contentContainerStyle = props.contentContainerStyle,
      titleNumberOfLines = props.titleNumberOfLines,
      _props$ImageComponent = props.ImageComponent,
      ImageComponent = _props$ImageComponent === void 0 ? _Image.default : _props$ImageComponent,
      _props$imageProps = props.imageProps,
      imageProps = _props$imageProps === void 0 ? {} : _props$imageProps,
      attributes = __rest(props, ["featured", "imageSrc", "icon", "title", "children", "caption", "titleStyle", "onPress", "activeOpacity", "overlayContainerStyle", "captionStyle", "iconContainerStyle", "imageContainerStyle", "containerStyle", "contentContainerStyle", "titleNumberOfLines", "ImageComponent", "imageProps"]);

  var _props$width = props.width,
      width = _props$width === void 0 ? _reactNative.Dimensions.get('window').width : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? width * 0.8 : _props$height;

  if (featured) {
    var featuredProps = {
      title: title,
      icon: icon,
      caption: caption,
      imageSrc: imageSrc,
      onPress: onPress,
      activeOpacity: activeOpacity,
      containerStyle: containerStyle,
      imageContainerStyle: imageContainerStyle,
      overlayContainerStyle: overlayContainerStyle,
      titleStyle: titleStyle,
      captionStyle: captionStyle,
      width: width,
      height: height,
      imageProps: imageProps,
      ImageComponent: ImageComponent
    };
    return _react.default.createElement(_FeaturedTile.default, featuredProps);
  }

  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, attributes, {
    onPress: onPress,
    activeOpacity: activeOpacity,
    style: _reactNative.StyleSheet.flatten([{
      width: width,
      height: height
    }, containerStyle && containerStyle])
  }), _react.default.createElement(ImageComponent, (0, _extends2.default)({
    resizeMode: "cover",
    source: imageSrc,
    containerStyle: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle]),
    style: (0, _extends2.default)((0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject), {
      alignItems: 'center',
      justifyContent: 'center'
    })
  }, imageProps), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle])
  }, icon && _react.default.createElement(_Icon.default, icon))), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.contentContainer, contentContainerStyle && contentContainerStyle])
  }, _react.default.createElement(_Text.default, {
    testID: "tileTitle",
    h4: !titleStyle || !('fontSize' in titleStyle),
    style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle]),
    numberOfLines: titleNumberOfLines
  }, title), children));
};

exports.Tile = Tile;

var styles = _reactNative.StyleSheet.create({
  imageContainer: {
    flex: 2
  },
  text: {
    backgroundColor: 'rgba(0,0,0,0)',
    marginBottom: 5
  },
  contentContainer: {
    paddingTop: 15,
    paddingBottom: 5,
    paddingLeft: 15,
    paddingRight: 15
  },
  iconContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center'
  }
});

var _default = (0, _config.withTheme)(Tile, 'Tile');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,