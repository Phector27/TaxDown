acc55d1b4b665a648c773f5cd82ec9cd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));

var _config = require("../config");

var _Text = _interopRequireDefault(require("../text/Text"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var CardTitle = function CardTitle(_a) {
  var _b;

  var style = _a.style,
      theme = _a.theme,
      props = __rest(_a, ["style", "theme"]);

  return _react.default.createElement(_Text.default, (0, _extends2.default)({
    testID: "cardTitle",
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)((0, _extends2.default)({
      fontSize: (0, _normalizeText.default)(14),
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey1
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.black),
      default: {
        fontWeight: 'bold'
      }
    })), {
      textAlign: 'center',
      marginBottom: 15
    }), style])
  }, props));
};

var _default = (0, _config.withTheme)(CardTitle, 'CardTitle');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNhcmRUaXRsZSIsIl9hIiwiX2IiLCJzdHlsZSIsInRoZW1lIiwicHJvcHMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImZvbnRTaXplIiwibm9ybWFsaXplIiwiY29sb3IiLCJjb2xvcnMiLCJncmV5MSIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImZvbnRzIiwiYmxhY2siLCJkZWZhdWx0IiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsIm1hcmdpbkJvdHRvbSIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbIkNhcmRUaXRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0sIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IG5vcm1hbGl6ZSBmcm9tICcuLi9oZWxwZXJzL25vcm1hbGl6ZVRleHQnO1xuaW1wb3J0IHsgZm9udHMsIHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi90ZXh0L1RleHQnO1xuY29uc3QgQ2FyZFRpdGxlID0gKF9hKSA9PiB7XG4gICAgdmFyIF9iO1xuICAgIHZhciB7IHN0eWxlLCB0aGVtZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICByZXR1cm4gKDxUZXh0IHRlc3RJRD1cImNhcmRUaXRsZVwiIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBmb250U2l6ZTogbm9ybWFsaXplKDE0KSwgY29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncmV5MSB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgYW5kcm9pZDogT2JqZWN0LmFzc2lnbih7fSwgZm9udHMuYW5kcm9pZC5ibGFjayksXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpLCB7IHRleHRBbGlnbjogJ2NlbnRlcicsIG1hcmdpbkJvdHRvbTogMTUgfSksXG4gICAgICAgIHN0eWxlLFxuICAgIF0pfSB7Li4ucHJvcHN9Lz4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHdp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