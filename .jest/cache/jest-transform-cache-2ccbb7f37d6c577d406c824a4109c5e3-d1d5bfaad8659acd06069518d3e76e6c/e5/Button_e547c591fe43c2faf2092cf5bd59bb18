98bd0367a250131c5ef33576fa57c56b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _config = require("../config");

var _helpers = require("../helpers");

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultLoadingProps = function defaultLoadingProps(type, theme) {
  var _a;

  return {
    color: type === 'solid' ? 'white' : (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary,
    size: 'small'
  };
};

var Button = function Button(props) {
  var _a, _b, _c, _d, _e, _f, _g;

  (0, _react.useEffect)(function () {
    if (props.linearGradientProps && !props.ViewComponent) {
      console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
    }
  });

  var TouchableComponent = props.TouchableComponent,
      containerStyle = props.containerStyle,
      _props$onPress = props.onPress,
      onPress = _props$onPress === void 0 ? function () {
    return console.log('Please attach a method to this component');
  } : _props$onPress,
      buttonStyle = props.buttonStyle,
      _props$type = props.type,
      type = _props$type === void 0 ? 'solid' : _props$type,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      loadingStyle = props.loadingStyle,
      passedLoadingProps = props.loadingProps,
      _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      titleProps = props.titleProps,
      passedTitleStyle = props.titleStyle,
      icon = props.icon,
      iconContainerStyle = props.iconContainerStyle,
      _props$iconRight = props.iconRight,
      iconRight = _props$iconRight === void 0 ? false : _props$iconRight,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      disabledStyle = props.disabledStyle,
      disabledTitleStyle = props.disabledTitleStyle,
      _props$raised = props.raised,
      raised = _props$raised === void 0 ? false : _props$raised,
      linearGradientProps = props.linearGradientProps,
      _props$ViewComponent = props.ViewComponent,
      ViewComponent = _props$ViewComponent === void 0 ? _reactNative.View : _props$ViewComponent,
      theme = props.theme,
      _props$iconPosition = props.iconPosition,
      iconPosition = _props$iconPosition === void 0 ? 'left' : _props$iconPosition,
      attributes = __rest(props, ["TouchableComponent", "containerStyle", "onPress", "buttonStyle", "type", "loading", "loadingStyle", "loadingProps", "title", "titleProps", "titleStyle", "icon", "iconContainerStyle", "iconRight", "disabled", "disabledStyle", "disabledTitleStyle", "raised", "linearGradientProps", "ViewComponent", "theme", "iconPosition"]);

  var handleOnPress = (0, _react.useCallback)(function (evt) {
    if (!loading) {
      onPress(evt);
    }
  }, [loading, onPress]);

  var TouchableComponentInternal = TouchableComponent || _reactNative.Platform.select({
    android: linearGradientProps ? _reactNative.TouchableOpacity : _reactNative.TouchableNativeFeedback,
    default: _reactNative.TouchableOpacity
  });

  var titleStyle = _reactNative.StyleSheet.flatten([{
    color: type === 'solid' ? 'white' : (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary
  }, styles.title, passedTitleStyle, disabled && {
    color: (0, _helpers.color)((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.disabled).darken(0.3).string()
  }, disabled && disabledTitleStyle]);

  var background = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 ? _reactNative.TouchableNativeFeedback.Ripple((0, _color.default)((_c = titleStyle === null || titleStyle === void 0 ? void 0 : titleStyle.color) === null || _c === void 0 ? void 0 : _c.toString()).alpha(0.32).rgb().string(), true) : undefined;
  var loadingProps = (0, _extends2.default)((0, _extends2.default)({}, defaultLoadingProps(type, theme)), passedLoadingProps);
  var accessibilityState = {
    disabled: !!disabled,
    busy: !!loading
  };
  var positionStyle = {
    top: 'column',
    bottom: 'column-reverse',
    left: 'row',
    right: 'row-reverse'
  };
  return _react.default.createElement(_reactNative.View, {
    style: [styles.container, {
      borderRadius: 3 || styles.container.borderRadius
    }, containerStyle, raised && !disabled && type !== 'clear' && styles.raised]
  }, _react.default.createElement(TouchableComponentInternal, (0, _extends2.default)({
    onPress: handleOnPress,
    delayPressIn: 0,
    activeOpacity: 0.3,
    accessibilityRole: "button",
    accessibilityState: accessibilityState,
    disabled: disabled,
    background: background
  }, attributes), _react.default.createElement(ViewComponent, (0, _extends2.default)({}, linearGradientProps, {
    style: _reactNative.StyleSheet.flatten([styles.button, styles.buttonOrientation, {
      flexDirection: positionStyle[iconRight ? 'right' : iconPosition] || 'row'
    }, {
      backgroundColor: type === 'solid' ? (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.primary : 'transparent',
      borderColor: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.primary,
      borderWidth: type === 'outline' ? _reactNative.StyleSheet.hairlineWidth : 0
    }, buttonStyle, disabled && type === 'solid' && {
      backgroundColor: (_f = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _f === void 0 ? void 0 : _f.disabled
    }, disabled && type === 'outline' && {
      borderColor: (0, _helpers.color)((_g = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _g === void 0 ? void 0 : _g.disabled).darken(0.3).string()
    }, disabled && disabledStyle])
  }), loading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([styles.loading, loadingStyle]),
    color: loadingProps.color,
    size: loadingProps.size
  }, loadingProps)), !loading && icon && (0, _helpers.renderNode)(_Icon.default, icon, {
    containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
  }), !loading && !!title && (0, _helpers.renderNode)(_reactNative.Text, title, (0, _extends2.default)({
    style: titleStyle
  }, titleProps)))));
};

exports.Button = Button;

var styles = _reactNative.StyleSheet.create({
  button: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 3,
    padding: 8
  },
  buttonOrientation: {
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 3,
    padding: 8
  },
  container: {
    overflow: 'hidden',
    borderRadius: 3
  },
  title: (0, _extends2.default)({
    fontSize: 16,
    textAlign: 'center',
    paddingVertical: 1
  }, _reactNative.Platform.select({
    android: {
      fontFamily: 'sans-serif-medium'
    },
    default: {
      fontSize: 18
    }
  })),
  iconContainer: {
    marginHorizontal: 5
  },
  raised: (0, _extends2.default)({
    backgroundColor: '#fff',
    overflow: 'visible'
  }, _reactNative.Platform.select({
    android: {
      elevation: 4
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  loading: {
    marginVertical: 2
  }
});

var _default = (0, _config.withTheme)(Button, 'Button');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,