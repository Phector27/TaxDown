4cb9dcd12e5c0c83e119ad81763ae861
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Image = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Image = function (_React$Component) {
  (0, _inherits2.default)(Image, _React$Component);

  var _super = _createSuper(Image);

  function Image() {
    var _this;

    (0, _classCallCheck2.default)(this, Image);
    _this = _super.apply(this, arguments);
    _this.state = {
      placeholderOpacity: new _reactNative.Animated.Value(1)
    };

    _this.onLoad = function (e) {
      var _this$props = _this.props,
          transition = _this$props.transition,
          onLoad = _this$props.onLoad,
          transitionDuration = _this$props.transitionDuration;

      if (!transition) {
        _this.state.placeholderOpacity.setValue(0);

        return;
      }

      _reactNative.Animated.timing(_this.state.placeholderOpacity, {
        toValue: 0,
        duration: transitionDuration,
        useNativeDriver: true
      }).start();

      onLoad && onLoad(e);
    };

    return _this;
  }

  (0, _createClass2.default)(Image, [{
    key: "render",
    value: function render() {
      var _a = this.props,
          onPress = _a.onPress,
          onLongPress = _a.onLongPress,
          _a$Component = _a.Component,
          Component = _a$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View : _a$Component,
          placeholderStyle = _a.placeholderStyle,
          PlaceholderContent = _a.PlaceholderContent,
          containerStyle = _a.containerStyle,
          _a$childrenContainerS = _a.childrenContainerStyle,
          childrenContainerStyle = _a$childrenContainerS === void 0 ? null : _a$childrenContainerS,
          _a$style = _a.style,
          style = _a$style === void 0 ? {} : _a$style,
          _a$ImageComponent = _a.ImageComponent,
          ImageComponent = _a$ImageComponent === void 0 ? _reactNative.Image : _a$ImageComponent,
          children = _a.children,
          attributes = __rest(_a, ["onPress", "onLongPress", "Component", "placeholderStyle", "PlaceholderContent", "containerStyle", "childrenContainerStyle", "style", "ImageComponent", "children"]);

      var hasImage = Boolean(attributes.source);

      var _b = _reactNative.StyleSheet.flatten(style),
          width = _b.width,
          height = _b.height,
          styleProps = __rest(_b, ["width", "height"]);

      return _react.default.createElement(Component, {
        onPress: onPress,
        onLongPress: onLongPress,
        accessibilityIgnoresInvertColors: true,
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, _react.default.createElement(ImageComponent, (0, _extends2.default)({
        testID: "RNE__Image",
        transition: true,
        transitionDuration: 360
      }, attributes, {
        onLoad: this.onLoad,
        style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFill, {
          width: width,
          height: height
        }, styleProps])
      })), _react.default.createElement(_reactNative.Animated.View, {
        pointerEvents: hasImage ? 'none' : 'auto',
        accessibilityElementsHidden: hasImage,
        importantForAccessibility: hasImage ? 'no-hide-descendants' : 'yes',
        style: [styles.placeholderContainer, {
          opacity: hasImage ? this.state.placeholderOpacity : 1
        }]
      }, _react.default.createElement(_reactNative.View, {
        testID: "RNE__Image__placeholder",
        style: _reactNative.StyleSheet.flatten([style, styles.placeholder, placeholderStyle])
      }, PlaceholderContent)), _react.default.createElement(_reactNative.View, {
        testID: "RNE__Image__children__container",
        style: childrenContainerStyle !== null && childrenContainerStyle !== void 0 ? childrenContainerStyle : style
      }, children));
    }
  }]);
  return Image;
}(_react.default.Component);

exports.Image = Image;
Image.getSize = _reactNative.Image.getSize;
Image.getSizeWithHeaders = _reactNative.Image.getSizeWithHeaders;
Image.prefetch = _reactNative.Image.prefetch;
Image.abortPrefetch = _reactNative.Image.abortPrefetch;
Image.queryCache = _reactNative.Image.queryCache;
Image.resolveAssetSource = _reactNative.Image.resolveAssetSource;

var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: 'transparent',
    position: 'relative',
    overflow: 'hidden'
  },
  placeholderContainer: (0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
  placeholder: {
    backgroundColor: '#bdbdbd',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

var _default = (0, _config.withTheme)(Image, 'Image');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,