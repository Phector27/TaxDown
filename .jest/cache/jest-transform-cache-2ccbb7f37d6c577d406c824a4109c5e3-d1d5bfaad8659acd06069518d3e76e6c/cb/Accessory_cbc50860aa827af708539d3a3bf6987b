cdb5f25c7b1df63dda472c8f5830fd59
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Image = _interopRequireDefault(require("../image/Image"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
      size = _a$size === void 0 ? 10 : _a$size,
      style = _a.style,
      _a$underlayColor = _a.underlayColor,
      underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
      onPress = _a.onPress,
      onLongPress = _a.onLongPress,
      source = _a.source,
      props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);

  return _react.default.createElement(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress
  }, _react.default.createElement(_reactNative.View, null, source ? _react.default.createElement(_Image.default, (0, _extends2.default)({
    source: source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    }
  }, props)) : _react.default.createElement(_Icon.default, (0, _extends2.default)({
    name: "mode-edit",
    type: "material",
    color: "#fff",
    size: size * 0.8
  }, props))));
};

var styles = _reactNative.StyleSheet.create({
  accessory: (0, _extends2.default)({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});

var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFjY2Vzc29yeSIsIl9hIiwic2l6ZSIsInN0eWxlIiwidW5kZXJsYXlDb2xvciIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsInNvdXJjZSIsInByb3BzIiwic3R5bGVzIiwiYWNjZXNzb3J5Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwicG9zaXRpb24iLCJib3R0b20iLCJyaWdodCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImJhY2tncm91bmRDb2xvciIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImRlZmF1bHQiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsInNoYWRvd1JhZGl1cyIsInNoYWRvd09wYWNpdHkiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJBY2Nlc3NvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRvdWNoYWJsZUhpZ2hsaWdodCwgVmlldywgUGxhdGZvcm0sIFN0eWxlU2hlZXQsIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vaW1hZ2UvSW1hZ2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbnMvSWNvbic7XG5jb25zdCBBY2Nlc3NvcnkgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzaXplID0gMTAsIHN0eWxlLCB1bmRlcmxheUNvbG9yID0gJyMwMDAnLCBvblByZXNzLCBvbkxvbmdQcmVzcywgc291cmNlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInNpemVcIiwgXCJzdHlsZVwiLCBcInVuZGVybGF5Q29sb3JcIiwgXCJvblByZXNzXCIsIFwib25Mb25nUHJlc3NcIiwgXCJzb3VyY2VcIl0pO1xuICAgIHJldHVybiAoPFRvdWNoYWJsZUhpZ2hsaWdodCBzdHlsZT17W1xuICAgICAgICBzdHlsZXMuYWNjZXNzb3J5LFxuICAgICAgICB7XG4gICAgICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogc2l6ZSAvIDIsXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlLFxuICAgIF19IHVuZGVybGF5Q29sb3I9e3VuZGVybGF5Q29sb3J9IG9uUHJlc3M9e29uUHJlc3N9IG9uTG9uZ1ByZXNzPXtvbkxvbmdQcmVzc30+XG4gICAgICA8Vmlldz5cbiAgICAgICAge3NvdXJjZSA/ICg8SW1hZ2Ugc291cmNlPXtzb3VyY2V9IHN0eWxlPXt7XG4gICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgIGJvcmRlclJhZGl1czogc2l6ZSAvIDIsXG4gICAgfX0gey4uLnByb3BzfS8+KSA6ICg8SWNvbiBuYW1lPVwibW9kZS1lZGl0XCIgdHlwZT1cIm1hdGVyaWFsXCIgY29sb3I9XCIjZmZmXCIgc2l6ZT17c2l6ZSAqIDAuOH0gey4uLnByb3BzfS8+KX1cbiAgICAgIDwvVmlldz5cbiAgICA8L1RvdWNoYWJsZUhpZ2hsaWdodD4pO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBhY2Nlc3Nvcnk6IE9iamVjdC5hc3NpZ24oeyBwb3NpdGlvbjogJ2Fic29sdXRlJywgYm90dG9tOiAwLCByaWdodDogMCwgYWxpZ25JdGVtczogJ2NlbnRlcicsIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJywgYmFja2dyb3VuZENvbG9yOiAnI2FhYScgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgICAgZWxldmF0aW9uOiAxLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBzaGFkb3dDb2xvcjogJyMwMDAnLFxuICAgICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAxLCBoZWlnaHQ6IDEgfSxcbiAgICAgICAgICAgIHNoYWRvd1JhZGl1czogMixcbiAgICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDAuNSxcbiAgICAgICAgfSxcbiAgICB9KSksXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShBY2Nlc3NvcnksICdBdmF0YXJBY2Nlc3NvcnknKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBZkEsSUFBSUEsTUFBTSxHQUFJ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