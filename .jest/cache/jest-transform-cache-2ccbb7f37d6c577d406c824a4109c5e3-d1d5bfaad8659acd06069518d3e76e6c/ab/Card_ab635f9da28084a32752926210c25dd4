da1e31bf4e5f6503280ddbd35a91ba86
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Card = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _CardTitle = _interopRequireDefault(require("./CardTitle"));

var _CardDivider = _interopRequireDefault(require("./CardDivider"));

var _CardImage = _interopRequireDefault(require("./CardImage"));

var _CardFeaturedTitle = _interopRequireDefault(require("./CardFeaturedTitle"));

var _CardFeaturedSubtitle = _interopRequireDefault(require("./CardFeaturedSubtitle"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Card = function Card(props) {
  var _a, _b;

  var children = props.children,
      containerStyle = props.containerStyle,
      wrapperStyle = props.wrapperStyle,
      theme = props.theme,
      attributes = __rest(props, ["children", "containerStyle", "wrapperStyle", "theme"]);

  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0,
      borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    })), containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle])
  }, children));
};

exports.Card = Card;

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  }
});

var ThemedCard = (0, _extends2.default)((0, _config.withTheme)(Card, 'Card'), {
  Divider: _CardDivider.default,
  Image: _CardImage.default,
  Title: _CardTitle.default,
  FeaturedTitle: _CardFeaturedTitle.default,
  FeaturedSubtitle: _CardFeaturedSubtitle.default
});
var _default = ThemedCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNhcmQiLCJwcm9wcyIsIl9hIiwiX2IiLCJjaGlsZHJlbiIsImNvbnRhaW5lclN0eWxlIiwid3JhcHBlclN0eWxlIiwidGhlbWUiLCJhdHRyaWJ1dGVzIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvcnMiLCJ3aGl0ZSIsImJvcmRlcldpZHRoIiwicGFkZGluZyIsIm1hcmdpbiIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckNvbG9yIiwiZ3JleTUiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJkZWZhdWx0Iiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJzdHlsZXMiLCJ3cmFwcGVyIiwiY3JlYXRlIiwiVGhlbWVkQ2FyZCIsIndpdGhUaGVtZSIsIkRpdmlkZXIiLCJDYXJkRGl2aWRlciIsIkltYWdlIiwiQ2FyZEltYWdlIiwiVGl0bGUiLCJDYXJkVGl0bGUiLCJGZWF0dXJlZFRpdGxlIiwiQ2FyZEZlYXR1cmVkVGl0bGUiLCJGZWF0dXJlZFN1YnRpdGxlIiwiQ2FyZEZlYXR1cmVkU3VidGl0bGUiXSwic291cmNlcyI6WyJDYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBQbGF0Zm9ybSwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IENhcmRUaXRsZSBmcm9tICcuL0NhcmRUaXRsZSc7XG5pbXBvcnQgQ2FyZERpdmlkZXIgZnJvbSAnLi9DYXJkRGl2aWRlcic7XG5pbXBvcnQgQ2FyZEltYWdlIGZyb20gJy4vQ2FyZEltYWdlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRUaXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFRpdGxlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRTdWJ0aXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFN1YnRpdGxlJztcbmNvbnN0IENhcmQgPSAocHJvcHMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGNvbnRhaW5lclN0eWxlLCB3cmFwcGVyU3R5bGUsIHRoZW1lIH0gPSBwcm9wcywgYXR0cmlidXRlcyA9IF9fcmVzdChwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjb250YWluZXJTdHlsZVwiLCBcIndyYXBwZXJTdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICByZXR1cm4gKDxWaWV3IHsuLi5hdHRyaWJ1dGVzfSBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7IGJhY2tncm91bmRDb2xvcjogKF9hID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLndoaXRlLCBib3JkZXJXaWR0aDogMSwgcGFkZGluZzogMTUsIG1hcmdpbjogMTUsIG1hcmdpbkJvdHRvbTogMCwgYm9yZGVyQ29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncmV5NSB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsMCwwLCAuMiknLFxuICAgICAgICAgICAgICAgIHNoYWRvd09mZnNldDogeyBoZWlnaHQ6IDAsIHdpZHRoOiAwIH0sXG4gICAgICAgICAgICAgICAgc2hhZG93T3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSksXG4gICAgICAgIGNvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlLFxuICAgIF0pfT5cbiAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMud3JhcHBlcixcbiAgICAgICAgd3JhcHBlclN0eWxlICYmIHdyYXBwZXJTdHlsZSxcbiAgICBdKX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgd3JhcHBlcjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbn0pO1xuZXhwb3J0IHsgQ2FyZCB9O1xuY29uc3QgVGhlbWVkQ2FyZCA9IE9iamVjdC5hc3NpZ24od2l0aFRoZW1lKENhcmQsICdDYXJkJyksIHtcbiAgICBEaXZpZGVyOiBDYXJkRGl2aWRlcixcbiAgICBJbWFnZTogQ2FyZEltYWdlLFxuICAgIFRpdGxlOiBDYXJkVGl0bGUsXG4gICAgRmVhdHVyZWRUaXRsZTogQ2FyZEZlYXR1cmVkVGl0bGUsXG4gICAgRmVhdHVyZWRTdWJ0aXRsZTogQ2FyZEZlYXR1cmVkU3VidGl0bGUsXG59KTtcbmV4cG9ydCBkZWZhdWx0IFRoZW1lZENhcmQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQWxCQSxJQUFJQSxNQUFNLEdBQUksUUFBUSxLQUFLQSxNQUFkLElBQXlCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsRUFBUjs7RUFDQSxLQUFLLElBQUlDLENBQVQsSUFBY0gsQ0FBZDtJQUFpQixJQUFJSSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1AsQ0FBckMsRUFBd0NHLENBQXhDLEtBQThDRixDQUFDLENBQUNPLE9BQUYsQ0FBVUwsQ0FBVixJQUFlLENBQWpFLEVBQ2JELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQU9ILENBQUMsQ0FBQ0csQ0FBRCxDQUFSO0VBREo7O0VBRUEsSUFBSUgsQ0FBQyxJQUFJLElBQUwsSUFBYSxPQUFPSSxNQUFNLENBQUNLLHFCQUFkLEtBQXdDLFVBQXpELEVBQ0ksS0FBSyxJ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