65ec682f9bf1190a4e1990aace34add4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Divider = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _theme = _interopRequireDefault(require("../config/theme"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var _a, _b;

var Divider = function Divider(_a) {
  var color = _a.color,
      _a$inset = _a.inset,
      inset = _a$inset === void 0 ? false : _a$inset,
      _a$insetType = _a.insetType,
      insetType = _a$insetType === void 0 ? 'left' : _a$insetType,
      _a$orientation = _a.orientation,
      orientation = _a$orientation === void 0 ? 'horizontal' : _a$orientation,
      style = _a.style,
      subHeader = _a.subHeader,
      subHeaderStyle = _a.subHeaderStyle,
      theme = _a.theme,
      width = _a.width,
      rest = __rest(_a, ["color", "inset", "insetType", "orientation", "style", "subHeader", "subHeaderStyle", "theme", "width"]);

  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([styles.divider, style, inset && (insetType === 'left' ? styles.leftInset : insetType === 'right' ? styles.rightInset : (0, _extends2.default)((0, _extends2.default)({}, styles.leftInset), styles.rightInset)), orientation === 'vertical' && styles.vertical, width && (orientation === 'horizontal' ? {
      borderBottomWidth: width
    } : {
      borderRightWidth: width
    }), color && (orientation === 'horizontal' ? {
      borderBottomColor: color
    } : {
      borderRightColor: color
    })])
  }, rest)), subHeader && orientation === 'horizontal' ? _react.default.createElement(_reactNative.Text, {
    style: _reactNative.StyleSheet.flatten([styles.subHeader, subHeaderStyle, inset && styles.leftInset])
  }, subHeader) : null);
};

exports.Divider = Divider;

var styles = _reactNative.StyleSheet.create({
  divider: {
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderBottomColor: (_a = _theme.default === null || _theme.default === void 0 ? void 0 : _theme.default.colors) === null || _a === void 0 ? void 0 : _a.divider
  },
  leftInset: {
    marginLeft: 72
  },
  rightInset: {
    marginRight: 72
  },
  vertical: {
    borderRightWidth: _reactNative.StyleSheet.hairlineWidth,
    borderRightColor: (_b = _theme.default === null || _theme.default === void 0 ? void 0 : _theme.default.colors) === null || _b === void 0 ? void 0 : _b.divider,
    height: 'auto',
    alignSelf: 'stretch'
  },
  subHeader: {
    includeFontPadding: false
  }
});

var _default = (0, _config.withTheme)(Divider, 'Divider');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9hIiwiX2IiLCJEaXZpZGVyIiwiY29sb3IiLCJpbnNldCIsImluc2V0VHlwZSIsIm9yaWVudGF0aW9uIiwic3R5bGUiLCJzdWJIZWFkZXIiLCJzdWJIZWFkZXJTdHlsZSIsInRoZW1lIiwid2lkdGgiLCJyZXN0IiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJkaXZpZGVyIiwibGVmdEluc2V0IiwicmlnaHRJbnNldCIsInZlcnRpY2FsIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiY3JlYXRlIiwiaGFpcmxpbmVXaWR0aCIsIlRoZW1lIiwiY29sb3JzIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiaGVpZ2h0IiwiYWxpZ25TZWxmIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiRGl2aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX2EsIF9iO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFZpZXcsIFN0eWxlU2hlZXQsIFRleHQsIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgVGhlbWUgZnJvbSAnLi4vY29uZmlnL3RoZW1lJztcbmNvbnN0IERpdmlkZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBjb2xvciwgaW5zZXQgPSBmYWxzZSwgaW5zZXRUeXBlID0gJ2xlZnQnLCBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJywgc3R5bGUsIHN1YkhlYWRlciwgc3ViSGVhZGVyU3R5bGUsIHRoZW1lLCB3aWR0aCB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImNvbG9yXCIsIFwiaW5zZXRcIiwgXCJpbnNldFR5cGVcIiwgXCJvcmllbnRhdGlvblwiLCBcInN0eWxlXCIsIFwic3ViSGVhZGVyXCIsIFwic3ViSGVhZGVyU3R5bGVcIiwgXCJ0aGVtZVwiLCBcIndpZHRoXCJdKTtcbiAgICByZXR1cm4gKDw+XG4gICAgPFZpZXcgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHN0eWxlcy5kaXZpZGVyLFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgaW5zZXQgJiZcbiAgICAgICAgICAgIChpbnNldFR5cGUgPT09ICdsZWZ0J1xuICAgICAgICAgICAgICAgID8gc3R5bGVzLmxlZnRJbnNldFxuICAgICAgICAgICAgICAgIDogaW5zZXRUeXBlID09PSAncmlnaHQnXG4gICAgICAgICAgICAgICAgICAgID8gc3R5bGVzLnJpZ2h0SW5zZXRcbiAgICAgICAgICAgICAgICAgICAgOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcy5sZWZ0SW5zZXQpLCBzdHlsZXMucmlnaHRJbnNldCkpLFxuICAgICAgICBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBzdHlsZXMudmVydGljYWwsXG4gICAgICAgIHdpZHRoICYmXG4gICAgICAgICAgICAob3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJ1xuICAgICAgICAgICAgICAgID8geyBib3JkZXJCb3R0b21XaWR0aDogd2lkdGggfVxuICAgICAgICAgICAgICAgIDogeyBib3JkZXJSaWdodFdpZHRoOiB3aWR0aCB9KSxcbiAgICAgICAgY29sb3IgJiZcbiAgICAgICAgICAgIChvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnXG4gICAgICAgICAgICAgICAgPyB7IGJvcmRlckJvdHRvbUNvbG9yOiBjb2xvciB9XG4gICAgICAgICAgICAgICAgOiB7IGJvcmRlclJpZ2h0Q29sb3I6IGNvbG9yIH0pLFxuICAgIF0pfSB7Li4ucmVzdH0vPlxuICAgIHtzdWJIZWFkZXIgJiYgb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/ICg8VGV4dCBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgc3R5bGVzLnN1YkhlYWRlcixcbiAgICAgICAgc3ViSGVhZGVyU3R5bGUsXG4gICAgICAgIGluc2V0ICYmIHN0eWxlcy5sZWZ0SW5zZXQsXG4gICAgXSl9PlxuICAgICAgICB7c3ViSGVhZGVyfVxuICAgICAgPC9UZXh0PikgOiBudWxsfVxuICA8Lz4pO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBkaXZpZGVyOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVdpZHRoOiBTdHlsZVNoZWV0LmhhaXJsaW5lV2lkdGgsXG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAoX2EgPSBUaGVtZSA9PT0gbnVsbCB8fCBUaGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogVGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGl2aWRlcixcbiAgICB9LFxuICAgIGxlZnRJbnNldDoge1xuICAgICAgICBtYXJnaW5MZWZ0OiA3MixcbiAgICB9LFxuICAgIHJpZ2h0SW5zZXQ6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDcyLFxuICAgIH0sXG4gICAgdmVydGljYWw6IHtcbiAgICAgICAgYm9yZGVyUmlnaHRXaWR0aDogU3R5bGVTaGVldC5oYWlybGluZVdpZHRoLFxuICAgICAgICBib3JkZXJSaWdodENvbG9yOiAoX2IgPSBUaGVtZSA9PT0gbnVsbCB8fCBUaGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogVGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGl2aWRlcixcbiAgICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAgIGFsaWduU2VsZjogJ3N0cmV0Y2gnLFxuICAgIH0sXG4gICAgc3ViSGVhZGVyOiB7XG4gICAgICAgIGluY2x1ZGVGb250UGFkZGluZzogZmFsc2UsXG4gICAgfSxcbn0pO1xuZXhwb3J0IHsgRGl2aWRlciB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKERpdmlkZXIsICdEaXZpZGVyJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVlBOztBQUNBOztBQUNBOztBQUNBOztBQWZBLElBQUlBLE1BQU0sR0FBSSxRQUFRLEtBQUtBLE1BQWQsSUFBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0VBQ2xELElBQUlDLENBQUMsR0FBRyxFQUFSOztFQUNBLEtBQUssSUFBSUMsQ0FBVCxJQUFjSCxDQUFkO0lBQWlCLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFD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