415a55c50a083f67e5a7729eeec3bf40
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var LinearProgress = function LinearProgress(_a) {
  var _b, _c;

  var _a$value = _a.value,
      value = _a$value === void 0 ? 0 : _a$value,
      _a$variant = _a.variant,
      variant = _a$variant === void 0 ? 'indeterminate' : _a$variant,
      _a$color = _a.color,
      color = _a$color === void 0 ? 'secondary' : _a$color,
      style = _a.style,
      theme = _a.theme,
      trackColor = _a.trackColor,
      props = __rest(_a, ["value", "variant", "color", "style", "theme", "trackColor"]);

  var _React$useState = _react.default.useState(0),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      width = _React$useState2[0],
      setWidth = _React$useState2[1];

  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
      animation = _React$useRef.current;

  var intermediate = _react.default.useRef();

  var startAnimation = _react.default.useCallback(function () {
    if (variant === 'indeterminate') {
      intermediate.current = _reactNative.Animated.timing(animation, {
        duration: 2000,
        toValue: 1,
        useNativeDriver: true,
        isInteraction: false
      });
      animation.setValue(0);

      _reactNative.Animated.loop(intermediate.current).start();
    } else {
      _reactNative.Animated.timing(animation, {
        duration: 1000,
        toValue: value || 0,
        useNativeDriver: _reactNative.Platform.OS !== 'web',
        isInteraction: false
      }).start();
    }
  }, [animation, variant, value]);

  var tintColor = color === 'secondary' || color === 'primary' ? (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b[color] : (0, _color.default)(color).rgb().string() || ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary);
  var trackTintColor = trackColor || (0, _color.default)(tintColor).alpha(0.4).rgb().string();

  _react.default.useEffect(function () {
    startAnimation();
  }, [startAnimation, value]);

  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({
    accessible: true,
    accessibilityRole: "progressbar",
    accessibilityValue: {
      now: value,
      min: 0,
      max: 1
    }
  }, props, {
    onLayout: function onLayout(e) {
      setWidth(e.nativeEvent.layout.width);
    },
    style: [{
      height: 4,
      overflow: 'hidden',
      width: '100%',
      backgroundColor: trackTintColor
    }, style]
  }), _react.default.createElement(_reactNative.Animated.View, {
    style: {
      transform: [{
        translateX: animation.interpolate(variant === 'indeterminate' ? {
          inputRange: [0, 1],
          outputRange: [-width, 0.5 * width]
        } : {
          inputRange: [0, 1],
          outputRange: [-0.5 * width, 0]
        })
      }, {
        scaleX: animation.interpolate(variant === 'indeterminate' ? {
          inputRange: [0, 0.5, 1],
          outputRange: [0.0001, 1, 0.001]
        } : {
          inputRange: [0, 1],
          outputRange: [0.0001, 1]
        })
      }],
      backgroundColor: tintColor,
      flex: 1
    }
  }));
};

var _default = LinearProgress;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,