{"version":3,"mappings":"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","names":["isPlatformSupported","Platform","OS","ENABLE_SCREENS","ENABLE_FABRIC","global","_global","nativeFabricUIManager","FabricComponents","require","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","console","error","ENABLE_FREEZE","enableFreeze","shouldEnableReactFreeze","minor","parseInt","version","split","warn","shouldUseActivityState","screensEnabled","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","NativeFullWindowOverlay","ScreensNativeModules","NativeScreen","Screen","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","ScreenStackHeaderConfig","ScreenStackHeaderSubview","DelayedFreeze","freeze","children","React","useState","freezeState","setFreezeState","setImmediate","_react","_reactFreeze","MaybeFreeze","props","rest","size","Children","count","childrenWithFreeze","map","child","index","args","_defineProperty","Animated","Value","ref","onComponentRef","setNativeProps","render","enabled","createAnimatedComponent","active","activityState","isNativeStack","statusBarColor","undefined","processedColor","handleRef","viewConfig","_ref$viewConfig","validAttributes","_ref$viewConfig$valid","style","display","setRef","onTransitionProgress","event","nativeEvent","progress","closing","goingForward","useNativeDriver","_TransitionProgressContext","Provider","value","_reactNative","View","Component","ScreenContainer","hasTwoStates","styles","StyleSheet","create","headerSubview","position","top","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","type","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenContext","createContext","module","exports","SearchBar","isSearchBarAvailableForCurrentPlatform","FullWindowOverlay","useTransitionProgress","executeNativeBackPress"],"sources":["index.native.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\n// @ts-ignore Getting private component\n// eslint-disable-next-line import/default\nimport processColor from 'react-native/Libraries/StyleSheet/processColor';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\n// @ts-expect-error nativeFabricUIManager is not yet included in the RN types\nconst ENABLE_FABRIC = !!global?.nativeFabricUIManager;\n\nconst FabricComponents = ENABLE_FABRIC ? require('./fabric') : {};\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<View>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue ||\n      FabricComponents.Screen ||\n      requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack ||\n      FabricComponents.ScreenStack ||\n      requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      FabricComponents.ScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      FabricComponents.ScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction MaybeFreeze({ freeze, children }: FreezeWrapperProps) {\n  if (ENABLE_FREEZE) {\n    return <DelayedFreeze freeze={freeze}>{children}</DelayedFreeze>;\n  } else {\n    return <>{children}</>;\n  }\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  if (ENABLE_FREEZE) {\n    const { children, ...rest } = props;\n    const size = React.Children.count(children);\n    // freezes all screens except the top one\n    const childrenWithFreeze = React.Children.map(children, (child, index) => (\n      <DelayedFreeze freeze={size - index > 1}>{child}</DelayedFreeze>\n    ));\n    return (\n      <ScreensNativeModules.NativeScreenStack {...rest}>\n        {childrenWithFreeze}\n      </ScreensNativeModules.NativeScreenStack>\n    );\n  }\n  return <ScreensNativeModules.NativeScreenStack {...props} />;\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass Screen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const { enabled = ENABLE_SCREENS, ...rest } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      if (!AnimatedNativeScreen) {\n        if (ENABLE_FABRIC) {\n          AnimatedNativeScreen = ScreensNativeModules.NativeScreen;\n        } else {\n          AnimatedNativeScreen = Animated.createAnimatedComponent(\n            ScreensNativeModules.NativeScreen\n          ) as React.ComponentType<ScreenProps>;\n        }\n      }\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        statusBarColor,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const processedColor = processColor(statusBarColor);\n\n      const handleRef = (ref: ViewConfig) => {\n        if (!ENABLE_FABRIC) {\n          if (ref?.viewConfig?.validAttributes?.style) {\n            ref.viewConfig.validAttributes.style = {\n              ...ref.viewConfig.validAttributes.style,\n              display: false,\n            };\n          }\n          this.setRef(ref);\n        }\n      };\n\n      return (\n        <MaybeFreeze freeze={activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            statusBarColor={processedColor}\n            activityState={activityState}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={handleRef}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }>\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}>\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </MaybeFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `react-native-reanimated` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(Screen);\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  get FullWindowOverlay() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeFullWindowOverlay;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n"]}