48a30593a0a0fac265de5d9ce7e37eaa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Switch = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Switch = function Switch(_a) {
  var _b, _c, _d;

  var _a$value = _a.value,
      value = _a$value === void 0 ? false : _a$value,
      _a$disabled = _a.disabled,
      disabled = _a$disabled === void 0 ? false : _a$disabled,
      onValueChange = _a.onValueChange,
      _a$color = _a.color,
      color = _a$color === void 0 ? 'primary' : _a$color,
      style = _a.style,
      theme = _a.theme,
      rest = __rest(_a, ["value", "disabled", "onValueChange", "color", "style", "theme"]);

  var switchedOnColor = color === 'primary' ? ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) ? theme.colors.primary : '' : color;
  var onTintColor = _reactNative.Platform.OS === 'ios' || !disabled ? switchedOnColor : ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.disabled) ? theme.colors.disabled : '';
  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled || !value ? (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.disabled : switchedOnColor;
  var props = _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: switchedOnColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ''
    }
  };
  return _react.default.createElement(_reactNative.Switch, (0, _extends2.default)({
    value: value,
    accessibilityState: {
      checked: value,
      disabled: disabled
    },
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange,
    style: style
  }, props, rest));
};

exports.Switch = Switch;

var _default = (0, _config.withTheme)(Switch, 'Switch');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlN3aXRjaCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwidmFsdWUiLCJkaXNhYmxlZCIsIm9uVmFsdWVDaGFuZ2UiLCJjb2xvciIsInN0eWxlIiwidGhlbWUiLCJyZXN0Iiwic3dpdGNoZWRPbkNvbG9yIiwiY29sb3JzIiwicHJpbWFyeSIsIm9uVGludENvbG9yIiwiUGxhdGZvcm0iLCJPUyIsInRodW1iVGludENvbG9yIiwidW5kZWZpbmVkIiwicHJvcHMiLCJhY3RpdmVUcmFja0NvbG9yIiwidGh1bWJDb2xvciIsImFjdGl2ZVRodW1iQ29sb3IiLCJ0cmFja0NvbG9yIiwidHJ1ZSIsImZhbHNlIiwiY2hlY2tlZCIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbInN3aXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3dpdGNoIGFzIE5hdGl2ZVN3aXRjaCwgUGxhdGZvcm0sIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5jb25zdCBTd2l0Y2ggPSAoX2EpID0+IHtcbiAgICB2YXIgX2IsIF9jLCBfZDtcbiAgICB2YXIgeyB2YWx1ZSA9IGZhbHNlLCBkaXNhYmxlZCA9IGZhbHNlLCBvblZhbHVlQ2hhbmdlLCBjb2xvciA9ICdwcmltYXJ5Jywgc3R5bGUsIHRoZW1lIH0gPSBfYSwgcmVzdCA9IF9fcmVzdChfYSwgW1widmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcIm9uVmFsdWVDaGFuZ2VcIiwgXCJjb2xvclwiLCBcInN0eWxlXCIsIFwidGhlbWVcIl0pO1xuICAgIC8vIHN3aXRjaGVkT25Db2xvciBkZWFscyB3aXRoIHBpY2tpbmcgdXAgYSBjb2xvciBwcm92aWRlZCBhcyBwcm9wcyBieSB1c2VyIG9yIHBpY2tzIHVwIGRlZmF1bHQgdGhlbWVcbiAgICBjb25zdCBzd2l0Y2hlZE9uQ29sb3IgPSBjb2xvciA9PT0gJ3ByaW1hcnknXG4gICAgICAgID8gKChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wcmltYXJ5KSA/IHRoZW1lLmNvbG9ycy5wcmltYXJ5XG4gICAgICAgICAgICA6ICcnXG4gICAgICAgIDogY29sb3I7XG4gICAgY29uc3Qgb25UaW50Q29sb3IgPSBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgfHwgIWRpc2FibGVkXG4gICAgICAgID8gc3dpdGNoZWRPbkNvbG9yXG4gICAgICAgIDogKChfYyA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kaXNhYmxlZCkgPyB0aGVtZS5jb2xvcnMuZGlzYWJsZWRcbiAgICAgICAgICAgIDogJyc7XG4gICAgY29uc3QgdGh1bWJUaW50Q29sb3IgPSBQbGF0Zm9ybS5PUyA9PT0gJ2lvcydcbiAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgOiBkaXNhYmxlZCB8fCAhdmFsdWVcbiAgICAgICAgICAgID8gKF9kID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmRpc2FibGVkIDogc3dpdGNoZWRPbkNvbG9yO1xuICAgIGNvbnN0IHByb3BzID0gUGxhdGZvcm0uT1MgPT09ICd3ZWInXG4gICAgICAgID8ge1xuICAgICAgICAgICAgYWN0aXZlVHJhY2tDb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgICB0aHVtYkNvbG9yOiB0aHVtYlRpbnRDb2xvcixcbiAgICAgICAgICAgIGFjdGl2ZVRodW1iQ29sb3I6IHN3aXRjaGVkT25Db2xvcixcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHRodW1iQ29sb3I6IHRodW1iVGludENvbG9yLFxuICAgICAgICAgICAgdHJhY2tDb2xvcjoge1xuICAgICAgICAgICAgICAgIHRydWU6IG9uVGludENvbG9yLFxuICAgICAgICAgICAgICAgIGZhbHNlOiAnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgcmV0dXJuICg8TmF0aXZlU3dpdGNoIHZhbHVlPXt2YWx1ZX0gYWNjZXNzaWJpbGl0eVN0YXRlPXt7XG4gICAgICAgIGNoZWNrZWQ6IHZhbHVlLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICB9fSBkaXNhYmxlZD17ZGlzYWJsZWR9IG9uVmFsdWVDaGFuZ2U9e2Rpc2FibGVkID8gdW5kZWZpbmVkIDogb25WYWx1ZUNoYW5nZX0gc3R5bGU9e3N0eWxlfSB7Li4ucHJvcHN9IHsuLi5yZXN0fS8+KTtcbn07XG5leHBvcnQgeyBTd2l0Y2ggfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShTd2l0Y2gsICdTd2l0Y2gnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBYkEsSUFBSUEsTUFBTSxHQUFJLFFBQVEsS0FBS0EsTUFBZCxJQUF5QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLEVBQVI7O0VBQ0EsS0FBSyxJQUFJQyxDQUFULElBQWNILENBQWQ7SUFBaUIsSUFBSUksTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNQLENBQXJDLEVBQXdDRyxDQUF4QyxLQUE4Q0YsQ0FBQyxDQUFDTyxPQUFGLENBQVVMLENBQVYsSUFBZSxDQUFqRSxFQUNiRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxHQUFPSCxDQUFDLENBQUNHLENBQUQsQ0FBUjtFQURKOztFQUVBLElBQUlILENBQUMsSUFBSSxJQUFMLElBQWEsT0FBT0ksTUFBTSxDQUFDSyxxQkFBZCxLQUF3QyxVQUF6RCxFQUNJLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV1AsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFQLENBQTZCVCxDQUE3QixDQUFwQixFQUFxRFUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQTNELEVBQW1FRCxDQUFDLEVBQXBFLEVBQXdFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFDLENBQUNPLENBQUQsQ0FBWCxJQUFrQixDQUFsQixJQUF1Qk4sTUFBTSxDQUFDQyxTQUFQLENBQWlCTyxvQkFBakIsQ0FBc0NMLElBQXRDLENBQTJDUCxDQUEz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