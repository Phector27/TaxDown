72c65f0ffbc4542d60b3a05d6466a101
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _ListItemBase = _interopRequireDefault(require("./ListItemBase"));

var _helpers = require("../helpers");

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ListItemSwipeable = function ListItemSwipeable(_a) {
  var children = _a.children,
      leftStyle = _a.leftStyle,
      rightStyle = _a.rightStyle,
      leftContent = _a.leftContent,
      rightContent = _a.rightContent,
      _a$leftWidth = _a.leftWidth,
      leftWidth = _a$leftWidth === void 0 ? _helpers.ScreenWidth / 3 : _a$leftWidth,
      _a$rightWidth = _a.rightWidth,
      rightWidth = _a$rightWidth === void 0 ? _helpers.ScreenWidth / 3 : _a$rightWidth,
      props = __rest(_a, ["children", "leftStyle", "rightStyle", "leftContent", "rightContent", "leftWidth", "rightWidth"]);

  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
      panX = _React$useRef.current;

  var currValue = _react.default.useRef(0);

  var prevValue = _react.default.useRef(0);

  _react.default.useEffect(function () {
    var subs = panX.addListener(function (_ref) {
      var value = _ref.value;
      currValue.current = value;
    });
    return function () {
      panX.removeListener(subs);
    };
  }, [panX]);

  var slideAnimation = _react.default.useCallback(function (toValue) {
    _reactNative.Animated.spring(panX, {
      toValue: toValue,
      useNativeDriver: true
    }).start();

    prevValue.current = toValue;
  }, [panX]);

  var onPanResponderMove = function onPanResponderMove(_, _ref2) {
    var dx = _ref2.dx;

    if (!prevValue.current) {
      prevValue.current = currValue.current;
    }

    var newDX = prevValue.current + dx;

    if (Math.abs(newDX) > _helpers.ScreenWidth / 2) {
      return;
    }

    panX.setValue(newDX);
  };

  var onPanResponderRelease = function onPanResponderRelease(_, _ref3) {
    var dx = _ref3.dx;
    prevValue.current = currValue.current;

    if (Math.sign(dx) > 0 && !leftContent || Math.sign(dx) < 0 && !rightContent) {
      return slideAnimation(0);
    }

    if (Math.abs(currValue.current) >= _helpers.ScreenWidth / 3) {
      slideAnimation(currValue.current > 0 ? rightWidth : -leftWidth);
    } else {
      slideAnimation(0);
    }
  };

  var _React$useRef2 = _react.default.useRef(_reactNative.PanResponder.create({
    onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {
      return true;
    },
    onPanResponderGrant: function onPanResponderGrant() {
      return false;
    },
    onPanResponderMove: onPanResponderMove,
    onPanResponderRelease: onPanResponderRelease
  })),
      _panResponder = _React$useRef2.current;

  return _react.default.createElement(_reactNative.View, {
    style: {
      justifyContent: 'center'
    }
  }, _react.default.createElement(_reactNative.View, {
    style: [styles.hidden, {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'space-between'
    }]
  }, _react.default.createElement(_reactNative.View, {
    style: [{
      width: leftWidth,
      zIndex: 1
    }, leftStyle]
  }, leftContent), _react.default.createElement(_reactNative.View, {
    style: {
      flex: 0
    }
  }), _react.default.createElement(_reactNative.View, {
    style: [{
      width: rightWidth,
      zIndex: 1
    }, rightStyle]
  }, rightContent)), _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
    style: {
      transform: [{
        translateX: panX
      }],
      zIndex: 2
    }
  }, _panResponder.panHandlers), _react.default.createElement(_ListItemBase.default, props, children)));
};

var styles = _reactNative.StyleSheet.create({
  hidden: {
    bottom: 0,
    left: 0,
    overflow: 'hidden',
    position: 'absolute',
    right: 0,
    top: 0
  }
});

var _default = ListItemSwipeable;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,