{"version":3,"names":["AppContainer","require","I18nManager","Platform","React","ScrollView","StyleSheet","View","RootTagContext","ModalEventEmitter","OS","NativeModalManager","NativeEventEmitter","uniqueModalIdentifier","confirmProps","props","__DEV__","presentationStyle","transparent","console","warn","Modal","_identifier","_eventSubscription","addListener","event","modalID","onDismiss","remove","visible","containerStyles","backgroundColor","animationType","innerChildren","context","children","hardwareAccelerated","onRequestClose","onShow","statusBarTranslucent","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","testID","container","Component","defaultProps","contextType","side","getConstants","isRTL","create","position","ExportedModal","ModalInjection","unstable_Modal","module","exports"],"sources":["Modal.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nconst AppContainer = require('../ReactNative/AppContainer');\nconst I18nManager = require('../ReactNative/I18nManager');\nimport ModalInjection from './ModalInjection';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeModalManager from './NativeModalManager';\nconst Platform = require('../Utilities/Platform');\nconst React = require('react');\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst View = require('../Components/View/View');\n\nconst {RootTagContext} = require('../ReactNative/RootTag');\n\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport {VirtualizedListContextResetter} from '../Lists/VirtualizedListContext.js';\nimport type {RootTag} from '../ReactNative/RootTag';\nimport type {DirectEventHandler} from '../Types/CodegenTypes';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport RCTModalHostView from './RCTModalHostViewNativeComponent';\n\ntype ModalEventDefinitions = {\n  modalDismissed: [{modalID: number}],\n};\n\nconst ModalEventEmitter =\n  Platform.OS === 'ios' && NativeModalManager != null\n    ? new NativeEventEmitter<ModalEventDefinitions>(\n        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n        // If you want to use the native module on other platforms, please remove this condition and test its behavior\n        Platform.OS !== 'ios' ? null : NativeModalManager,\n      )\n    : null;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * See https://reactnative.dev/docs/modal\n */\n\n// In order to route onDismiss callbacks, we need to uniquely identifier each\n// <Modal> on screen. There can be different ones, either nested or as siblings.\n// We cannot pass the onDismiss callback to native as the view will be\n// destroyed before the callback is fired.\nlet uniqueModalIdentifier = 0;\n\ntype OrientationChangeEvent = $ReadOnly<{|\n  orientation: 'portrait' | 'landscape',\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://reactnative.dev/docs/modal#animationtype\n   */\n  animationType?: ?('none' | 'slide' | 'fade'),\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://reactnative.dev/docs/modal#presentationstyle\n   */\n  presentationStyle?: ?(\n    | 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n  ),\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://reactnative.dev/docs/modal#transparent\n   */\n  transparent?: ?boolean,\n\n  /**\n   * The `statusBarTranslucent` prop determines whether your modal should go under\n   * the system statusbar.\n   *\n   * See https://reactnative.dev/docs/modal#transparent\n   */\n  statusBarTranslucent?: ?boolean,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * This prop works only on Android.\n   *\n   * See https://reactnative.dev/docs/modal#hardwareaccelerated\n   */\n  hardwareAccelerated?: ?boolean,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://reactnative.dev/docs/modal#visible\n   */\n  visible?: ?boolean,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://reactnative.dev/docs/modal#onrequestclose\n   */\n  onRequestClose?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://reactnative.dev/docs/modal#onshow\n   */\n  onShow?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://reactnative.dev/docs/modal#ondismiss\n   */\n  onDismiss?: ?() => mixed,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://reactnative.dev/docs/modal#supportedorientations\n   */\n  supportedOrientations?: ?$ReadOnlyArray<\n    | 'portrait'\n    | 'portrait-upside-down'\n    | 'landscape'\n    | 'landscape-left'\n    | 'landscape-right',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://reactnative.dev/docs/modal#onorientationchange\n   */\n  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,\n|}>;\n\nfunction confirmProps(props: Props) {\n  if (__DEV__) {\n    if (\n      props.presentationStyle &&\n      props.presentationStyle !== 'overFullScreen' &&\n      props.transparent === true\n    ) {\n      console.warn(\n        `Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`,\n      );\n    }\n  }\n}\n\nclass Modal extends React.Component<Props> {\n  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|} = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextType: React.Context<RootTag> = RootTagContext;\n\n  _identifier: number;\n  _eventSubscription: ?EventSubscription;\n\n  constructor(props: Props) {\n    super(props);\n    if (__DEV__) {\n      confirmProps(props);\n    }\n    this._identifier = uniqueModalIdentifier++;\n  }\n\n  componentDidMount() {\n    // 'modalDismissed' is for the old renderer in iOS only\n    if (ModalEventEmitter) {\n      this._eventSubscription = ModalEventEmitter.addListener(\n        'modalDismissed',\n        event => {\n          if (event.modalID === this._identifier && this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        },\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._eventSubscription) {\n      this._eventSubscription.remove();\n    }\n  }\n\n  componentDidUpdate() {\n    if (__DEV__) {\n      confirmProps(this.props);\n    }\n  }\n\n  render(): React.Node {\n    if (this.props.visible !== true) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor:\n        this.props.transparent === true ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType || 'none';\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent === true) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ? (\n      <AppContainer rootTag={this.context}>{this.props.children}</AppContainer>\n    ) : (\n      this.props.children\n    );\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        onDismiss={() => {\n          if (this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        }}\n        visible={this.props.visible}\n        statusBarTranslucent={this.props.statusBarTranslucent}\n        identifier={this._identifier}\n        style={styles.modal}\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}\n        testID={this.props.testID}>\n        <VirtualizedListContextResetter>\n          <ScrollView.Context.Provider value={null}>\n            <View\n              style={[styles.container, containerStyles]}\n              collapsable={false}>\n              {innerChildren}\n            </View>\n          </ScrollView.Context.Provider>\n        </VirtualizedListContextResetter>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.getConstants().isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.111 was deployed. To see\n     * the error, delete this comment and run Flow. */\n    [side]: 0,\n    top: 0,\n    flex: 1,\n  },\n});\n\nconst ExportedModal: React.AbstractComponent<\n  React.ElementConfig<typeof Modal>,\n> = ModalInjection.unstable_Modal ?? Modal;\n\nmodule.exports = ExportedModal;\n"],"mappings":"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"}