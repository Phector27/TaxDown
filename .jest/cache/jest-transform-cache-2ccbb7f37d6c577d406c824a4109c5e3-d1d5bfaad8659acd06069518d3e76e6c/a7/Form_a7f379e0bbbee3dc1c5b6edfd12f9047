a036f109e1073a033243aebc5206e985
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _reactNativeElements = require("react-native-elements");

var _dispatchers = require("../../../store/app/dispatchers");

var _Loader = _interopRequireDefault(require("../Loader/Loader"));

var _styles = require("./styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Form = function Form() {
  var _useState = (0, _react.useState)(undefined),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      userData = _useState2[0],
      setUserData = _useState2[1];

  var inputData = (0, _reactRedux.useSelector)(function (state) {
    return state.app.inputData;
  });
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _dispatchers.getInputDataDispatchAction)());
  });

  var handleTextChange = function handleTextChange(text, label) {
    setUserData((0, _extends3.default)({}, userData, (0, _defineProperty2.default)({}, label, text)));
  };

  var getInputs = inputData.map(function (input) {
    return _react.default.createElement(_reactNativeElements.Input, {
      key: input.id,
      label: input.label,
      autoCompleteType: null,
      maxLength: input.maxLength,
      inputStyle: _styles.styles.inputStyle,
      placeholder: input.placeholder,
      value: userData ? userData[input.label] : "",
      onChangeText: function onChangeText(text) {
        return handleTextChange(text, input.label);
      },
      keyboardType: input.type === "number" ? "numeric" : "default"
    });
  });

  var handleSubmit = function handleSubmit() {
    if (userData) {
      dispatch((0, _dispatchers.setSubmissionsDataDispatchAction)(userData));
      setUserData(undefined);
    } else _reactNative.Alert.alert("Please, fill at least one field");
  };

  return inputData.length ? _react.default.createElement(_reactNative.ScrollView, {
    contentContainerStyle: _styles.styles.container
  }, getInputs, _react.default.createElement(_reactNativeElements.Button, {
    buttonStyle: _styles.styles.buttonStyle,
    titleStyle: _styles.styles.buttonTitleStyle,
    containerStyle: _styles.styles.buttonContainer,
    onPress: handleSubmit,
    title: "Submit"
  })) : _react.default.createElement(_Loader.default, null);
};

var _default = Form;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGb3JtIiwidXNlU3RhdGUiLCJ1bmRlZmluZWQiLCJ1c2VyRGF0YSIsInNldFVzZXJEYXRhIiwiaW5wdXREYXRhIiwidXNlU2VsZWN0b3IiLCJzdGF0ZSIsImFwcCIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJ1c2VFZmZlY3QiLCJnZXRJbnB1dERhdGFEaXNwYXRjaEFjdGlvbiIsImhhbmRsZVRleHRDaGFuZ2UiLCJ0ZXh0IiwibGFiZWwiLCJnZXRJbnB1dHMiLCJtYXAiLCJpbnB1dCIsImlkIiwibWF4TGVuZ3RoIiwic3R5bGVzIiwiaW5wdXRTdHlsZSIsInBsYWNlaG9sZGVyIiwidHlwZSIsImhhbmRsZVN1Ym1pdCIsInNldFN1Ym1pc3Npb25zRGF0YURpc3BhdGNoQWN0aW9uIiwiQWxlcnQiLCJhbGVydCIsImxlbmd0aCIsImNvbnRhaW5lciIsImJ1dHRvblN0eWxlIiwiYnV0dG9uVGl0bGVTdHlsZSIsImJ1dHRvbkNvbnRhaW5lciJdLCJzb3VyY2VzIjpbIkZvcm0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEFsZXJ0LCBTY3JvbGxWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCJcbmltcG9ydCB7IEJ1dHRvbiwgSW5wdXQgfSBmcm9tIFwicmVhY3QtbmF0aXZlLWVsZW1lbnRzXCJcbmltcG9ydCB7XG4gIGdldElucHV0RGF0YURpc3BhdGNoQWN0aW9uLFxuICBzZXRTdWJtaXNzaW9uc0RhdGFEaXNwYXRjaEFjdGlvblxufSBmcm9tICcuLi8uLi8uLi9zdG9yZS9hcHAvZGlzcGF0Y2hlcnMnXG5pbXBvcnQgeyBEZWZhdWx0U3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvaW5kZXhcIlxuaW1wb3J0IHsgRGF0YVJlc3BvbnNlIH0gZnJvbSBcIi4uLy4uLy4uL2FwaS90eXBlcy9hcHBcIlxuaW1wb3J0IHsgSUZvcm1EYXRhIH0gZnJvbSBcIi4vSW50ZXJmYWNlc1wiXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXIvTG9hZGVyXCJcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gXCIuL3N0eWxlc1wiXG5cbmNvbnN0IEZvcm06IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCBbdXNlckRhdGEsIHNldFVzZXJEYXRhXSA9IHVzZVN0YXRlPElGb3JtRGF0YSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKVxuICBjb25zdCBpbnB1dERhdGEgPSB1c2VTZWxlY3RvcjxEZWZhdWx0U3RhdGUsIERhdGFSZXNwb25zZS5JbnB1dEZpZWxkW10+KHN0YXRlID0+IHN0YXRlLmFwcC5pbnB1dERhdGEpXG4gIFxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKGdldElucHV0RGF0YURpc3BhdGNoQWN0aW9uKCkpXG4gIH0pXG5cbiAgY29uc3QgaGFuZGxlVGV4dENoYW5nZSA9ICh0ZXh0OiBzdHJpbmcgfCBudW1iZXIsIGxhYmVsOiBzdHJpbmcpID0+IHtcbiAgICBzZXRVc2VyRGF0YSh7XG4gICAgICAuLi51c2VyRGF0YSxcbiAgICAgIFtsYWJlbF06IHRleHQsXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGdldElucHV0cyA9IGlucHV0RGF0YS5tYXAoKGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxJbnB1dFxuICAgICAgICBrZXk9e2lucHV0LmlkfVxuICAgICAgICBsYWJlbD17aW5wdXQubGFiZWx9XG4gICAgICAgIGF1dG9Db21wbGV0ZVR5cGU9e251bGx9XG4gICAgICAgIG1heExlbmd0aD17aW5wdXQubWF4TGVuZ3RofVxuICAgICAgICBpbnB1dFN0eWxlPXtzdHlsZXMuaW5wdXRTdHlsZX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e2lucHV0LnBsYWNlaG9sZGVyfVxuICAgICAgICB2YWx1ZT17dXNlckRhdGEgPyB1c2VyRGF0YVtpbnB1dC5sYWJlbF0gOiBcIlwifVxuICAgICAgICBvbkNoYW5nZVRleHQ9eyh0ZXh0KSA9PiBoYW5kbGVUZXh0Q2hhbmdlKHRleHQsIGlucHV0LmxhYmVsKX1cbiAgICAgICAga2V5Ym9hcmRUeXBlPXtpbnB1dC50eXBlID09PSBcIm51bWJlclwiID8gXCJudW1lcmljXCIgOiBcImRlZmF1bHRcIn1cbiAgICAgIC8+XG4gICAgKX1cbiAgKVxuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcbiAgICBpZiAodXNlckRhdGEpIHtcbiAgICAgIGRpc3BhdGNoKHNldFN1Ym1pc3Npb25zRGF0YURpc3BhdGNoQWN0aW9uKHVzZXJEYXRhKSlcbiAgICAgIHNldFVzZXJEYXRhKHVuZGVmaW5lZClcbiAgICB9IGVsc2UgQWxlcnQuYWxlcnQoXCJQbGVhc2UsIGZpbGwgYXQgbGVhc3Qgb25lIGZpZWxkXCIpXG4gIH1cblxuICByZXR1cm4gaW5wdXREYXRhLmxlbmd0aCA/XG4gICAgPFNjcm9sbFZpZXcgY29udGVudENvbnRhaW5lclN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgIHtnZXRJbnB1dHN9XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGJ1dHRvblN0eWxlPXtzdHlsZXMuYnV0dG9uU3R5bGV9XG4gICAgICAgIHRpdGxlU3R5bGU9e3N0eWxlcy5idXR0b25UaXRsZVN0eWxlfVxuICAgICAgICBjb250YWluZXJTdHlsZT17c3R5bGVzLmJ1dHRvbkNvbnRhaW5lcn1cbiAgICAgICAgb25QcmVzcz17aGFuZGxlU3VibWl0fVxuICAgICAgICB0aXRsZT0nU3VibWl0J1xuICAgICAgLz5cbiAgICA8L1Njcm9sbFZpZXc+XG4gICAgOiA8TG9hZGVyIC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQU9BOztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxJQUE2QixHQUFHLFNBQWhDQSxJQUFnQyxHQUFNO0VBQzFDLGdCQUFnQyxJQUFBQyxlQUFBLEVBQWdDQyxTQUFoQyxDQUFoQztFQUFBO0VBQUEsSUFBT0MsUUFBUDtFQUFBLElBQWlCQyxXQUFqQjs7RUFDQSxJQUFNQyxTQUFTLEdBQUcsSUFBQUMsdUJBQUEsRUFBcUQsVUFBQUMsS0FBSztJQUFBLE9BQUlBLEtBQUssQ0FBQ0MsR0FBTixDQUFVSCxTQUFkO0VBQUEsQ0FBMUQsQ0FBbEI7RUFFQSxJQUFNSSxRQUFRLEdBQUcsSUFBQUMsdUJBQUEsR0FBakI7RUFFQSxJQUFBQyxnQkFBQSxFQUFVLFlBQU07SUFDZEYsUUFBUSxDQUFDLElBQUFHLHVDQUFBLEdBQUQsQ0FBUjtFQUNELENBRkQ7O0VBSUEsSUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDQyxJQUFELEVBQXdCQyxLQUF4QixFQUEwQztJQUNqRVgsV0FBVyw0QkFDTkQsUUFETSxvQ0FFUlksS0FGUSxFQUVBRCxJQUZBLEdBQVg7RUFJRCxDQUxEOztFQU9BLElBQU1FLFNBQVMsR0FBR1gsU0FBUyxDQUFDWSxHQUFWLENBQWMsVUFBQ0MsS0FBRCxFQUFXO0lBQ3pDLE9BQ0UsNkJBQUMsMEJBQUQ7TUFDRSxHQUFHLEVBQUVBLEtBQUssQ0FBQ0MsRUFEYjtNQUVFLEtBQUssRUFBRUQsS0FBSyxDQUFDSCxLQUZmO01BR0UsZ0JBQWdCLEVBQUUsSUFIcEI7TUFJRSxTQUFTLEVBQUVHLEtBQUssQ0FBQ0UsU0FKbkI7TUFLRSxVQUFVLEVBQUVDLGNBQUEsQ0FBT0MsVUFMckI7TUFNRSxXQUFXLEVBQUVKLEtBQUssQ0FBQ0ssV0FOckI7TUFPRSxLQUFLLEVBQUVwQixRQUFRLEdBQUdBLFFBQVEsQ0FBQ2UsS0FBSyxDQUFDSCxLQUFQLENBQVgsR0FBMkIsRUFQNUM7TUFRRSxZQUFZLEVBQUUsc0JBQUNELElBQUQ7UUFBQSxPQUFVRCxnQkFBZ0IsQ0FBQ0MsSUFBRCxFQUFPSSxLQUFLLENBQUNILEtBQWIsQ0FBMUI7TUFBQSxDQVJoQjtNQVNFLFlBQVksRUFBRUcsS0FBSyxDQUFDTSxJQUFOLEtBQWUsUUFBZixHQUEwQixTQUExQixHQUFzQztJQVR0RCxFQURGO0VBWUUsQ0FiYyxDQUFsQjs7RUFnQkEsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBTTtJQUN6QixJQUFJdEIsUUFBSixFQUFjO01BQ1pNLFFBQVEsQ0FBQyxJQUFBaUIsNkNBQUEsRUFBaUN2QixRQUFqQyxDQUFELENBQVI7TUFDQUMsV0FBVyxDQUFDRixTQUFELENBQVg7SUFDRCxDQUhELE1BR095QixrQkFBQSxDQUFNQyxLQUFOLENBQVksaUNBQVo7RUFDUixDQUxEOztFQU9BLE9BQU92QixTQUFTLENBQUN3QixNQUFWLEdBQ0wsNkJBQUMsdUJBQUQ7SUFBWSxxQkFBcUIsRUFBRVIsY0FBQSxDQUFPUztFQUExQyxHQUNHZCxTQURILEVBRUUsNkJBQUMsMkJBQUQ7SUFDRSxXQUFXLEVBQUVLLGNBQUEsQ0FBT1UsV0FEdEI7SUFFRSxVQUFVLEVBQUVWLGNBQUEsQ0FBT1csZ0JBRnJCO0lBR0UsY0FBYyxFQUFFWCxjQUFBLENBQU9ZLGVBSHpCO0lBSUUsT0FBTyxFQUFFUixZQUpYO0lBS0UsS0FBSyxFQUFDO0VBTFIsRUFGRixDQURLLEdBV0gsNkJBQUMsZUFBRCxPQVhKO0FBWUQsQ0FwREQ7O2VBc0RlekIsSSJ9