921b6969e7e74ad695161c92f2bebbde
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Input = _interopRequireDefault(require("../input/Input"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ListItemInput = function ListItemInput(_a) {
  var inputStyle = _a.inputStyle,
      inputContainerStyle = _a.inputContainerStyle,
      containerStyle = _a.containerStyle,
      props = __rest(_a, ["inputStyle", "inputContainerStyle", "containerStyle"]);

  return _react.default.createElement(_Input.default, (0, _extends2.default)({
    renderErrorMessage: false
  }, props, {
    inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
    inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
    containerStyle: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
  }));
};

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingRight: 0
  },
  inputContainer: {
    flex: 1,
    borderBottomWidth: 0,
    width: null,
    height: null
  },
  input: {
    flex: 1,
    textAlign: 'right',
    width: null,
    height: null
  }
});

var _default = (0, _config.withTheme)(ListItemInput, 'ListItemInput');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxpc3RJdGVtSW5wdXQiLCJfYSIsImlucHV0U3R5bGUiLCJpbnB1dENvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyU3R5bGUiLCJwcm9wcyIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwiaW5wdXQiLCJpbnB1dENvbnRhaW5lciIsImNvbnRhaW5lciIsImNyZWF0ZSIsImZsZXgiLCJwYWRkaW5nUmlnaHQiLCJib3JkZXJCb3R0b21XaWR0aCIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dEFsaWduIiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiTGlzdEl0ZW1JbnB1dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL2lucHV0L0lucHV0JztcbmNvbnN0IExpc3RJdGVtSW5wdXQgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBpbnB1dFN0eWxlLCBpbnB1dENvbnRhaW5lclN0eWxlLCBjb250YWluZXJTdHlsZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJpbnB1dFN0eWxlXCIsIFwiaW5wdXRDb250YWluZXJTdHlsZVwiLCBcImNvbnRhaW5lclN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxJbnB1dCByZW5kZXJFcnJvck1lc3NhZ2U9e2ZhbHNlfSB7Li4ucHJvcHN9IGlucHV0U3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmlucHV0LCBpbnB1dFN0eWxlXSl9IGlucHV0Q29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHN0eWxlcy5pbnB1dENvbnRhaW5lcixcbiAgICAgICAgaW5wdXRDb250YWluZXJTdHlsZSxcbiAgICBdKX0gY29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVdKX0vPik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IDAsXG4gICAgfSxcbiAgICBpbnB1dENvbnRhaW5lcjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgICAgICBib3JkZXJCb3R0b21XaWR0aDogMCxcbiAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIGhlaWdodDogbnVsbCxcbiAgICB9LFxuICAgIGlucHV0OiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIGhlaWdodDogbnVsbCxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTGlzdEl0ZW1JbnB1dCwgJ0xpc3RJdGVtSW5wdXQnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBZEEsSUFBSUEsTUFBTSxHQUFJLFFBQVEsS0FBS0EsTUFBZCxJQUF5QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLEVBQVI7O0VBQ0EsS0FBSyxJQUFJQyxDQUFULElBQWNILENBQWQ7SUFBaUIsSUFBSUksTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNQLENBQXJDLEVBQXdDRyxDQUF4QyxLQUE4Q0YsQ0FBQyxDQUFDTyxPQUFGLENBQVVMLENBQVYsSUFBZSxDQUFqRSxFQUNiRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxHQUFPSCxDQUFDLENBQUNHLENBQUQsQ0FBUjtFQURKOztFQUVBLElBQUlILENBQUMsSUFBSSxJQUFMLElBQWEsT0FBT0ksTUFBTSxDQUFDSyxxQkFBZCxLQUF3QyxVQUF6RCxFQUNJLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV1AsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFQLENBQTZCVCxDQUE3QixDQUFwQixFQUFxRFUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQTNELEVBQW1FRCxDQUFDLEVBQXBFLEVBQXdFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFDLENBQUNPLENBQUQsQ0FBWCxJQUFrQixDQUFsQixJQUF1Qk4sTUFBTSxDQUFDQyxTQUFQLENBQWlCTyxvQkFBakIsQ0FBc0NMLElBQXRDLENBQTJDUCxDQUEzQyxFQUE4Q0csQ0FBQyxDQUFDTyxDQUFELENBQS9DLENBQTNCLEVBQ0lSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFELENBQUYsQ0FBRCxHQUFVVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBRCxDQUFGLENBQVg7RUFDUDtFQUNMLE9BQU9SLENBQVA7QUFDSCxDQVZEOztBQWVBLElBQU1XLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsRUFBRCxFQUFRO0VBQzFCLElBQU1DLFVBQU4sR0FBMERELEVBQTFELENBQU1DLFVBQU47RUFBQSxJQUFrQkMsbUJBQWxCLEdBQTBERixFQUExRCxDQUFrQkUsbUJBQWxCO0VBQUEsSUFBdUNDLGNBQXZDLEdBQTBESCxFQUExRCxDQUF1Q0csY0FBdkM7RUFBQSxJQUE4REMsS0FBOUQsR0FBc0VuQixNQUFNLENBQUNlLEVBQUQsRUFBSyxDQUFDLFlBQUQsRUFBZSxxQkFBZixFQUFzQyxnQkFBdEMsQ0FBTCxDQUE1RTs7RUFDQSxPQUFRLDZCQUFDLGNBQUQ7SUFBTyxrQkFBa0IsRUFBRTtFQUEzQixHQUFzQ0ksS0FBdEM7SUFBNkMsVUFBVSxFQUFFQyx1QkFBQSxDQUFXQyxPQUFYLENBQW1CLENBQUNDLE1BQU0sQ0FBQ0MsS0FBUixFQUFlUCxVQUFmLENBQW5CLENBQXpEO0lBQXlHLG1CQUFtQixFQUFFSSx1QkFBQSxDQUFXQyxPQUFYLENBQW1CLENBQ3JKQyxNQUFNLENBQUNFLGNBRDhJLEVBRXJKUCxtQkFGcUosQ0FBbkIsQ0FBOUg7SUFHSixjQUFjLEVBQUVHLHVCQUFBLENBQVdDLE9BQVgsQ0FBbUIsQ0FBQ0MsTUFBTSxDQUFDRyxTQUFSLEVBQW1CUCxjQUFuQixDQUFuQjtFQUhaLEdBQVI7QUFJSCxDQU5EOztBQU9BLElBQU1JLE1BQU0sR0FBR0YsdUJBQUEsQ0FBV00sTUFBWCxDQUFrQjtFQUM3QkQsU0FBUyxFQUFFO0lBQ1BFLElBQUksRUFBRSxDQURDO0lBRVBDLFlBQVksRUFBRTtFQUZQLENBRGtCO0VBSzdCSixjQUFjLEVBQUU7SUFDWkcsSUFBSSxFQUFFLENBRE07SUFFWkUsaUJBQWlCLEVBQUUsQ0FGUDtJQUdaQyxLQUFLLEVBQUUsSUFISztJQUlaQyxNQUFNLEVBQUU7RUFKSSxDQUxhO0VBVzdCUixLQUFLLEVBQUU7SUFDSEksSUFBSSxFQUFFLENBREg7SUFFSEssU0FBUyxFQUFFLE9BRlI7SUFHSEYsS0FBSyxFQUFFLElBSEo7SUFJSEMsTUFBTSxFQUFFO0VBSkw7QUFYc0IsQ0FBbEIsQ0FBZjs7ZUFrQmUsSUFBQUUsaUJBQUEsRUFBVW5CLGFBQVYsRUFBeUIsZUFBekIsQyJ9