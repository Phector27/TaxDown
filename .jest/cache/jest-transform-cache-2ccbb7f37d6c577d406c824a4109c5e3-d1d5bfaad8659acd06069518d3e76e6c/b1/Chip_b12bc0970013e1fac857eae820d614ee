4f8c699f8854402f6d4bc1e45a726a31
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Chip = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Button = _interopRequireDefault(require("./Button"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Chip = function Chip(props) {
  var titleStyle = props.titleStyle,
      buttonStyle = props.buttonStyle,
      rest = __rest(props, ["titleStyle", "buttonStyle"]);

  return _react.default.createElement(_Button.default, (0, _extends2.default)({
    titleStyle: _reactNative.StyleSheet.flatten([{
      fontSize: 14,
      paddingHorizontal: 2
    }, titleStyle]),
    buttonStyle: _reactNative.StyleSheet.flatten([{
      borderRadius: 30
    }, buttonStyle])
  }, props.onPress === undefined && {
    TouchableComponent: _reactNative.TouchableWithoutFeedback
  }, rest));
};

exports.Chip = Chip;

var _default = (0, _config.withTheme)(Chip, 'Chip');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNoaXAiLCJwcm9wcyIsInRpdGxlU3R5bGUiLCJidXR0b25TdHlsZSIsInJlc3QiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImZvbnRTaXplIiwicGFkZGluZ0hvcml6b250YWwiLCJib3JkZXJSYWRpdXMiLCJvblByZXNzIiwidW5kZWZpbmVkIiwiVG91Y2hhYmxlQ29tcG9uZW50IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiQ2hpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLCBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcbmNvbnN0IENoaXAgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHRpdGxlU3R5bGUsIGJ1dHRvblN0eWxlIH0gPSBwcm9wcywgcmVzdCA9IF9fcmVzdChwcm9wcywgW1widGl0bGVTdHlsZVwiLCBcImJ1dHRvblN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxCdXR0b24gdGl0bGVTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgeyBmb250U2l6ZTogMTQsIHBhZGRpbmdIb3Jpem9udGFsOiAyIH0sXG4gICAgICAgIHRpdGxlU3R5bGUsXG4gICAgXSl9IGJ1dHRvblN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW3sgYm9yZGVyUmFkaXVzOiAzMCB9LCBidXR0b25TdHlsZV0pfSB7Li4uKHByb3BzLm9uUHJlc3MgPT09IHVuZGVmaW5lZCAmJiB7XG4gICAgICAgIFRvdWNoYWJsZUNvbXBvbmVudDogVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLFxuICAgIH0pfSB7Li4ucmVzdH0vPik7XG59O1xuZXhwb3J0IHsgQ2hpcCB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKENoaXAsICdDaGlwJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQUNBOztBQWRBLElBQUlBLE1BQU0sR0FBSSxRQUFRLEtBQUtBLE1BQWQsSUFBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0VBQ2xELElBQUlDLENBQUMsR0FBRyxFQUFSOztFQUNBLEtBQUssSUFBSUMsQ0FBVCxJQUFjSCxDQUFkO0lBQWlCLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUCxDQUFyQyxFQUF3Q0csQ0FBeEMsS0FBOENGLENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFWLElBQWUsQ0FBakUsRUFDYkQsQ0FBQyxDQUFDQyxDQUFELENBQUQsR0FBT0gsQ0FBQyxDQUFDRyxDQUFELENBQVI7RUFESjs7RUFFQSxJQUFJSCxDQUFDLElBQUksSUFBTCxJQUFhLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQWQsS0FBd0MsVUFBekQsRUFDSSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBUCxDQUE2QlQsQ0FBN0IsQ0FBcEIsRUFBcURVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUEzRCxFQUFtRUQsQ0FBQyxFQUFwRSxFQUF3RTtJQUNwRSxJQUFJVCxDQUFDLENBQUNPLE9BQUYsQ0FBVUwsQ0FBQyxDQUFDTyxDQUFELENBQVgsSUFBa0IsQ0FBbEIsSUFBdUJOLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQk8sb0JBQWpCLENBQXNDTCxJQUF0QyxDQUEyQ1AsQ0FBM0MsRUFBOENHLENBQUMsQ0FBQ08sQ0FBRCxDQUEvQyxDQUEzQixFQUNJUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sQ0FBRCxDQUFGLENBQUQsR0FBVVYsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLENBQUQsQ0FBRixDQUFYO0VBQ1A7RUFDTCxPQUFPUixDQUFQO0FBQ0gsQ0FWRDs7QUFlQSxJQUFNVyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFDQyxLQUFELEVBQVc7RUFDcEIsSUFBUUMsVUFBUixHQUFvQ0QsS0FBcEMsQ0FBUUMsVUFBUjtFQUFBLElBQW9CQyxXQUFwQixHQUFvQ0YsS0FBcEMsQ0FBb0JFLFdBQXBCO0VBQUEsSUFBMkNDLElBQTNDLEdBQWtEbEIsTUFBTSxDQUFDZSxLQUFELEVBQVEsQ0FBQyxZQUFELEVBQWUsYUFBZixDQUFSLENBQXhEOztFQUNBLE9BQVEsNkJBQUMsZUFBRDtJQUFRLFVBQVUsRUFBRUksdUJBQUEsQ0FBV0MsT0FBWCxDQUFtQixDQUMzQztNQUFFQyxRQUFRLEVBQUUsRUFBWjtNQUFnQkMsaUJBQWlCLEVBQUU7SUFBbkMsQ0FEMkMsRUFFM0NOLFVBRjJDLENBQW5CLENBQXBCO0lBR0osV0FBVyxFQUFFRyx1QkFBQSxDQUFXQyxPQUFYLENBQW1CLENBQUM7TUFBRUcsWUFBWSxFQUFFO0lBQWhCLENBQUQsRUFBdUJOLFdBQXZCLENBQW5CO0VBSFQsR0FHdUVGLEtBQUssQ0FBQ1MsT0FBTixLQUFrQkMsU0FBbEIsSUFBK0I7SUFDMUdDLGtCQUFrQixFQUFFQztFQURzRixDQUh0RyxFQUtBVCxJQUxBLEVBQVI7QUFNSCxDQVJEOzs7O2VBVWUsSUFBQVUsaUJBQUEsRUFBVWQsSUFBVixFQUFnQixNQUFoQixDIn0=