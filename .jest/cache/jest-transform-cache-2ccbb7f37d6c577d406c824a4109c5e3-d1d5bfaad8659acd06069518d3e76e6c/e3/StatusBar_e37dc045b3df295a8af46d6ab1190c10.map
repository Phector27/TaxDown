{"version":3,"names":["mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","animated","showHideTransition","backgroundColor","value","barStyle","translucent","hidden","transition","networkActivityIndicatorVisible","StatusBar","_stackEntry","pushStackEntry","popStackEntry","replaceStackEntry","animation","_defaultProps","Platform","OS","NativeStatusBarManagerIOS","setHidden","NativeStatusBarManagerAndroid","style","setStyle","visible","console","warn","setNetworkActivityIndicatorVisible","color","processedColor","processColor","invariant","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","React","Component","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","currentHeight","HEIGHT","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"sources":["StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport * as React from 'react';\nimport Platform from '../../Utilities/Platform';\nimport invariant from 'invariant';\nimport processColor from '../../StyleSheet/processColor';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated,\n            transition: showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"mappings":"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"}